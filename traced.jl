precompile(Tuple{typeof(Base.similar), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.length), Array{Base.Grisu.Bignums.Bignum, 1}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Array{UInt32, 1}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{Type{NamedTuple{(:stderr,), T} where T<:Tuple}, Tuple{Base.TTY}})
precompile(Tuple{getfield(Base, Symbol("##pipeline#553")), Nothing, Nothing, Base.TTY, Bool, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("#kw##pipeline")), NamedTuple{(:stderr,), Tuple{Base.TTY}}, typeof(Base.pipeline), Base.Cmd})
precompile(Tuple{getfield(Base, Symbol("##open#563")), Bool, Bool, typeof(Base.open), Base.CmdRedirect, Base.TTY})
precompile(Tuple{typeof(Base.open), Base.CmdRedirect, String, Base.TTY})
precompile(Tuple{typeof(Base.convert), Type{IO}, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.getproperty), Base.Process, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{String, 1}})
precompile(Tuple{typeof(Base.write), Base.PipeEndpoint, String})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.UUID})
precompile(Tuple{getfield(Base, Symbol("##sprint#339")), Nothing, Int32, typeof(Base.sprint), Function, UInt64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, UInt64})
precompile(Tuple{typeof(Base.write), Base.Process, String})
precompile(Tuple{typeof(Base.show_delim_array), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}, Char, Char, Char, Bool, Int32, Int32})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{UInt64, UInt64}})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(ImageCore.__init__)})
precompile(Tuple{typeof(Base.rehash!), Base.Dict{Base.PkgId, Array{Function, 1}}, Int32})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.copyto!), Base.IndexLinear, Array{Function, 1}, Base.IndexLinear, Array{Any, 1}})
precompile(Tuple{typeof(Base.get!), getfield(Requires, Symbol("#1#2")), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##load_overrides#3")), Bool, typeof(Pkg.Artifacts.load_overrides)})
precompile(Tuple{typeof(Pkg.Artifacts.process_overrides), Base.Dict{String, Any}, Base.UUID})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Base.UUID, Base.Dict{String, Union{Base.SHA1, String}}}, Base.UUID})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Pkg.Artifacts.unpack_platform), Base.Dict{String, Any}, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, getfield(Pkg.Artifacts, Symbol("#21#22")){String, String}}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nosym#16")), String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#nover#17")), String})
precompile(Tuple{Type{NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), T} where T<:Tuple}, Tuple{Base.VersionNumber, Nothing, Nothing}})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libgfortran_version, :libstdcxx_version, :cxxstring_abi), Tuple{Base.VersionNumber, Nothing, Nothing}}, Type{Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#Linux#13#14")), Symbol, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.Linux}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Symbol, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Linux}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Linux, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{Type{NamedTuple{(:libc, :compiler_abi), T} where T<:Tuple}, Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#FreeBSD#19#20")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#Windows#17#18")), Nothing, Nothing, Pkg.BinaryPlatforms.CompilerABI, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.Windows}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.Windows, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{getfield(Core, Symbol("#kw#Type")), NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.MacOS}, Symbol})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.MacOS, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{typeof(Base.filter), Function, Base.KeySet{Pkg.BinaryPlatforms.Platform, Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Windows})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.MacOS})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.BinaryPlatforms, Symbol("#39#41")){Pkg.BinaryPlatforms.Linux}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.ht_keyindex2!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Nothing}, Nothing, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.push!), Base.Set{Pkg.BinaryPlatforms.Platform}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Pkg.BinaryPlatforms.Linux})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##ensure_artifact_installed")), NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.Linux}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_paths#9")), Bool, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_exists#11")), Bool, typeof(Pkg.Artifacts.artifact_exists), Base.SHA1})
precompile(Tuple{typeof(Base.convert), Type{Nothing}, Base.SubString{String}})
precompile(Tuple{typeof(Base.convert), Type{Base.Pair{Nothing, String}}, Base.Pair{Base.SubString{String}, String}})
precompile(Tuple{typeof(Base.setindex!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Int32})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Base.Pair{Nothing, String}, 1}, Base.Pair{Base.SubString{String}, String}, Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}, Int32})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Array{Union{Nothing, Base.SubString{String}}, 1}, 1}, getfield(Pkg.PlatformEngines, Symbol("#88#90"))}})
precompile(Tuple{typeof(Pkg.PlatformEngines.list_tarball_symlinks), String})
precompile(Tuple{typeof(Base.write), Base.IOStream, Nothing})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##unpack#91")), Bool, typeof(Pkg.PlatformEngines.unpack), String, String})
precompile(Tuple{getfield(Pkg.PlatformEngines, Symbol("##download_verify_unpack#96")), Nothing, Bool, Bool, Bool, typeof(Pkg.PlatformEngines.download_verify_unpack), String, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("#kw##artifact_paths")), NamedTuple{(:honor_overrides,), Tuple{Bool}}, typeof(Pkg.Artifacts.artifact_paths), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##artifact_path#10")), Bool, typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{typeof(Pkg.Artifacts.create_artifact), getfield(Pkg.Artifacts, Symbol("#39#40")){Bool, String, String}})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##download_artifact#38")), Bool, typeof(Pkg.Artifacts.download_artifact), Base.SHA1, String, String})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##ensure_artifact_installed#42")), Pkg.BinaryPlatforms.Platform, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{typeof(Pkg.Artifacts.artifact_path), Base.SHA1})
precompile(Tuple{getfield(Pkg.Artifacts, Symbol("##query_override#7")), Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#7#9")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), getfield(OpenSpecFun_jll, Symbol("#8#10")), Tuple{Array{String, 1}}})
precompile(Tuple{typeof(VideoIO.loglevel)})
precompile(Tuple{typeof(VideoIO._read_packet), Ptr{VideoIO.AVInput{I} where I}, Ptr{UInt8}, Int32})
precompile(Tuple{typeof(VideoIO.AVFormat.av_find_input_format), String})
precompile(Tuple{typeof(Base.setindex!), VideoIO.AVDict, Int32, String})
precompile(Tuple{typeof(VideoIO.__init__)})
precompile(Tuple{typeof(Glob._match_bracket), Base.SubString{String}, Char, Int32, Char, Char})
precompile(Tuple{typeof(Glob._match), Base.SubString{String}, Int32, Char, Bool, Bool})
precompile(Tuple{Type{Glob.GlobMatch}, String})
precompile(Tuple{typeof(Glob.glob), String, String})
precompile(Tuple{typeof(Base.getindex), Array{Union{Base.SubString{String}, Glob.FilenameMatch{Base.SubString{String}}}, 1}, Int32})
precompile(Tuple{typeof(Base.occursin), Glob.FilenameMatch{Base.SubString{String}}, String})
precompile(Tuple{typeof(Glob._glob!), Array{String, 1}, Glob.FilenameMatch{Base.SubString{String}}})
precompile(Tuple{typeof(VideoIO.AVUtil.av_dict_set), Base.RefValue{Ptr{VideoIO.AVUtil.AVDictionary}}, String, String, Int32})
precompile(Tuple{typeof(Base.stat), Base.Libc.RawFD})
precompile(Tuple{typeof(Base.isvalid_file_crc), Base.IOStream})
precompile(Tuple{typeof(Base.stale_cachefile), String, String})
precompile(Tuple{typeof(Base._include_from_serialized), String, Array{Any, 1}})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, String})
precompile(Tuple{typeof(Base._require_search_from_serialized), Base.PkgId, String})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Nothing})
precompile(Tuple{typeof(Base.compilecache), Base.PkgId, String})
precompile(Tuple{typeof(Base._tryrequire_from_serialized), Base.PkgId, UInt64, Nothing})
precompile(Tuple{typeof(Base._require_from_serialized), String})
precompile(Tuple{typeof(Base._require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Base.PkgId})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.create_expr_cache), String, String, Array{Base.Pair{Base.PkgId, UInt64}, 1}, Base.UUID})
precompile(Tuple{typeof(Base._crc32c), Base.IOStream, UInt32})
precompile(Tuple{getfield(Base, Symbol("##open#271")), Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Base.open), getfield(Base, Symbol("#698#700")), String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int32})
precompile(Tuple{typeof(ImageInTerminal.__init__)})
precompile(Tuple{typeof(ImageInTerminal.use_24bit)})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{VideoIO.StreamInfo, 1}, 1}}})
precompile(Tuple{typeof(Base.array_subpadding), Type{T} where T, Type{T} where T})
precompile(Tuple{Type{Base.CyclePadding{P} where P}, DataType})
precompile(Tuple{typeof(Base.padding), Type{T} where T})
precompile(Tuple{typeof(VideoIO.opencamera)})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, getfield(VideoIO.AVCodecs, Symbol("#1#2"))}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Array{VideoIO.StreamInfo, 1}, 1}, Array{VideoIO.StreamInfo, 1}, Base.Generator{Base.UnitRange{Int32}, getfield(VideoIO, Symbol("#2#3"))}, Int32})
precompile(Tuple{typeof(VideoIO.AVFormat.avformat_open_input), Array{Ptr{VideoIO.AVFormat.AVFormatContext}, 1}, String, Ptr{VideoIO.AVFormat.AVInputFormat}, VideoIO.AVDict})
precompile(Tuple{getfield(VideoIO, Symbol("##AVInput#1")), Int32, Type{VideoIO.AVInput{I} where I}, String, Ptr{VideoIO.AVFormat.AVInputFormat}, VideoIO.AVDict})
precompile(Tuple{typeof(Base.divgcd), Int32, Int32})
precompile(Tuple{typeof(Base.collect), Base.Generator{Core.SimpleVector, getfield(VideoIO.AVUtil, Symbol("#1#2"))}})
precompile(Tuple{typeof(VideoIO.AVUtil.fieldposition), Type{VideoIO.AVUtil.AVFrame}, Symbol})
precompile(Tuple{Type{VideoIO.AVUtil.AVFrame}})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#206")){Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}, Ptr{UInt8}}, Type{Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}}, Type{Ptr{UInt8}}, Int32})
precompile(Tuple{typeof(Base.unalias), Array{Ptr{UInt8}, 1}, Base.ReinterpretArray{Ptr{UInt8}, 1, Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}, Array{Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{Ptr{UInt8}, 1, Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}, Array{Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}, 1}}, Tuple{Int32}})
precompile(Tuple{typeof(Base.throw_boundserror), Array{Ptr{UInt8}, 1}, Tuple{Base.OneTo{Int32}}})
precompile(Tuple{typeof(Base.copyto!), Array{Ptr{UInt8}, 1}, Base.ReinterpretArray{Ptr{UInt8}, 1, Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}, Array{Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}, 1}}})
precompile(Tuple{getfield(Base, Symbol("#thrownonint#206")){Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, Int32}, Type{Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}}, Type{Int32}, Int32})
precompile(Tuple{typeof(Base.unalias), Array{Int32, 1}, Base.ReinterpretArray{Int32, 1, Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, Array{Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, 1}}})
precompile(Tuple{typeof(Base.throw_boundserror), Base.ReinterpretArray{Int32, 1, Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, Array{Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, 1}}, Tuple{Int32}})
precompile(Tuple{typeof(Base.copyto!), Array{Int32, 1}, Base.ReinterpretArray{Int32, 1, Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, Array{Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, 1}}})
precompile(Tuple{Type{VideoIO.VideoTranscodeContext}, Ptr{VideoIO.SWScale.SwsContext}, Int32, Int32, Int32, Int32, Int32, Array{UInt8, 3}, Array{VideoIO.AVUtil.AVFrame, 1}, Base.ReinterpretArray{Ptr{UInt8}, 1, Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}, Array{Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}, 1}}, Base.ReinterpretArray{Int32, 1, Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, Array{Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, 1}}})
precompile(Tuple{getfield(VideoIO, Symbol("##VideoReader#4")), Bool, Int32, Int32, Type{VideoIO.VideoReader{transcode} where transcode}, VideoIO.AVInput{String}, Int32})
precompile(Tuple{typeof(VideoIO.opencamera), String, Ptr{VideoIO.AVFormat.AVInputFormat}, VideoIO.AVDict})
precompile(Tuple{getfield(VideoIO.AVCodecs, Symbol("#1#2")), Type{T} where T})
precompile(Tuple{typeof(Base._array_for), Type{Ptr{Nothing}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Ptr{Nothing}, 1}, Base.Generator{Core.SimpleVector, getfield(VideoIO.AVCodecs, Symbol("#1#2"))}, Int32, Int32})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Ptr{Nothing}, 1}, Ptr{Nothing}, Base.Generator{Core.SimpleVector, getfield(VideoIO.AVCodecs, Symbol("#1#2"))}, Int32})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int32, Array{Ptr{Nothing}, 1}, Int32, Int32})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Ptr{Nothing}, 1}, Int64, Int32})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Core.SimpleVector, getfield(VideoIO.AVCodecs, Symbol("#1#2"))}, Int32, Int32})
precompile(Tuple{Type{VideoIO.AVCodecs.AVPacket}, Ptr{Nothing}, Int64, Int64, Ptr{Nothing}, Int32, Int32, Int32, Ptr{Nothing}, Int32, Int64, Int64, Int64})
precompile(Tuple{Type{VideoIO.AVInput{String}}, String, Array{Ptr{VideoIO.AVFormat.AVFormatContext}, 1}, Array{Ptr{VideoIO.AVFormat.AVIOContext}, 1}, Int32, Array{VideoIO.AVCodecs.AVPacket, 1}, Array{VideoIO.StreamInfo, 1}, Array{VideoIO.StreamInfo, 1}, Array{VideoIO.StreamInfo, 1}, Array{VideoIO.StreamInfo, 1}, Array{VideoIO.StreamInfo, 1}, Array{VideoIO.StreamInfo, 1}, Base.Set{Int32}, Array{VideoIO.StreamContext, 1}, Bool})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ref{Ptr{VideoIO.AVUtil.AVDictionary}}}, Base.RefValue{Ptr{VideoIO.AVUtil.AVDictionary}}})
precompile(Tuple{getfield(VideoIO.AVUtil, Symbol("#1#2")), Type{T} where T})
precompile(Tuple{typeof(Base.zero), Type{Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}}})
precompile(Tuple{typeof(Base._array_for), Type{Tuple{Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}}, Core.SimpleVector, Base.HasLength})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, 1}, Base.Generator{Core.SimpleVector, getfield(VideoIO.AVUtil, Symbol("#1#2"))}, Int32, Int32})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, 1}, Tuple{Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, Base.Generator{Core.SimpleVector, getfield(VideoIO.AVUtil, Symbol("#1#2"))}, Int32})
precompile(Tuple{typeof(Base.zero), Type{Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}}})
precompile(Tuple{typeof(Base.copyto!), Array{Tuple{Any, Any, Any, Any, Any, Any, Any, Any}, 1}, Int32, Array{Tuple{Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, 1}, Int32, Int32})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, 1}, Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, Int32})
precompile(Tuple{typeof(Base.collect_to!), Array{Tuple{Any, Any, Any, Any, Any, Any, Any, Any}, 1}, Base.Generator{Core.SimpleVector, getfield(VideoIO.AVUtil, Symbol("#1#2"))}, Int32, Int32})
precompile(Tuple{typeof(Base.copyto!), Array{Any, 1}, Int32, Array{Tuple{Any, Any, Any, Any, Any, Any, Any, Any}, 1}, Int32, Int32})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Tuple{Any, Any, Any, Any, Any, Any, Any, Any}, 1}, Ptr{Nothing}, Int32})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Core.SimpleVector, getfield(VideoIO.AVUtil, Symbol("#1#2"))}, Int32, Int32})
precompile(Tuple{typeof(Base.zero), Type{VideoIO.AVUtil.AVRational}})
precompile(Tuple{typeof(Base.zero), Type{Tuple{UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64}}})
precompile(Tuple{typeof(Base.zero), Type{Tuple{Ptr{VideoIO.AVUtil.AVBufferRef}, Ptr{VideoIO.AVUtil.AVBufferRef}, Ptr{VideoIO.AVUtil.AVBufferRef}, Ptr{VideoIO.AVUtil.AVBufferRef}, Ptr{VideoIO.AVUtil.AVBufferRef}, Ptr{VideoIO.AVUtil.AVBufferRef}, Ptr{VideoIO.AVUtil.AVBufferRef}, Ptr{VideoIO.AVUtil.AVBufferRef}}}})
precompile(Tuple{typeof(Base.findfirst), Base.Fix2{typeof(Base.isequal), Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{VideoIO.AVUtil.AVFrame}, Tuple{Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, Ptr{Nothing}, Int32, Int32, Int32, Int32, Int32, UInt32, VideoIO.AVUtil.AVRational, Int64, Int64, Int64, Int32, Int32, Int32, Ptr{Nothing}, Tuple{UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64, UInt64}, Int32, Int32, Int32, Int32, Int64, Int32, UInt64, Tuple{Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}}, Ptr{Nothing}, Int32, Ptr{Nothing}, Int32, Int32, UInt32, UInt32, UInt32, UInt32, UInt32, Int64, Int64, Int64, Ptr{Nothing}, Int32, Int32, Int32, Ptr{Nothing}, Int32, Int32, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, UInt32, UInt32, UInt32, UInt32, Ptr{Nothing}})
precompile(Tuple{Type{VideoIO.VideoReader{true}}, VideoIO.AVInput{String}, VideoIO.StreamInfo, Int32, Ptr{VideoIO.AVCodecs.AVCodecContext}, Ptr{VideoIO.AVCodecs.AVCodec}, Array{VideoIO.AVUtil.AVFrame, 1}, Array{Int32, 1}, Int32, Int32, Int32, Base.Rational{Int32}, Base.Rational{Int32}, Array{Array{UInt8, 1}, 1}, VideoIO.VideoTranscodeContext})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{T, N, perm, iperm, AA} where AA<:(AbstractArray{T, N} where N where T) where iperm where perm where N where T}, Array{ColorTypes.Gray{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Int32, Int32}})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{T, N, perm, iperm, AA} where AA<:(AbstractArray{T, N} where N where T) where iperm where perm where N where T}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}, Tuple{Int32, Int32}})
precompile(Tuple{typeof(VideoIO.retrieve), VideoIO.VideoReader{true}})
precompile(Tuple{typeof(Base.read), VideoIO.VideoReader{true}})
precompile(Tuple{typeof(VideoIO.pump), VideoIO.AVInput{String}})
precompile(Tuple{typeof(Base.getindex), Array{VideoIO.StreamContext, 1}, Int32})
precompile(Tuple{typeof(VideoIO.decode_packet), VideoIO.VideoReader{true}, Array{VideoIO.AVCodecs.AVPacket, 1}})
precompile(Tuple{typeof(Base._collect), Base.UnitRange{Int32}, Base.Generator{Base.UnitRange{Int32}, getfield(Base.PermutedDimsArrays, Symbol("#1#2")){(2, 1), (2, 1)}}, Base.EltypeUnknown, Base.HasShape{1}})
precompile(Tuple{Type{Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}}, Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}})
precompile(Tuple{typeof(VideoIO.SWScale.sws_scale), Ptr{VideoIO.SWScale.SwsContext}, Base.ReinterpretArray{Ptr{UInt8}, 1, Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}, Array{Tuple{Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}, Ptr{UInt8}}, 1}}, Base.ReinterpretArray{Int32, 1, Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, Array{Tuple{Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32}, 1}}, Int32, Int32, Array{Ptr{UInt8}, 1}, Array{Int32, 1}})
precompile(Tuple{getfield(Base, Symbol("#throwbits#204")), Type{Array{UInt8, 1}}, Type{Ptr{UInt8}}, Type{Array{UInt8, 1}}})
precompile(Tuple{typeof(Base.reinterpret), Type{Ptr{UInt8}}, Array{Array{UInt8, 1}, 1}})
precompile(Tuple{typeof(VideoIO.retrieve!), VideoIO.VideoReader{true}, Base.PermutedDimsArrays.PermutedDimsArray{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2, (2, 1), (2, 1), Array{ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, 2}}})
precompile(Tuple{typeof(Base.empty!), Base.Dict{Int32, Nothing}})
precompile(Tuple{typeof(VideoIO.fieldposition), Type{VideoIO.AVFormat.AVIOContext}, Symbol})
precompile(Tuple{typeof(Base.close), VideoIO.AVInput{String}})
precompile(Tuple{typeof(VideoIO._close), VideoIO.VideoReader{true}})
